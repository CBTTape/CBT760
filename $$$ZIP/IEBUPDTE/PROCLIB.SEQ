./ ADD NAME=$$$INDEX 0666-07214-07214-2032-00001-00001-00000-DIR2UPDT

This dataset (sub-directory) contains some sample PROCedures used
to transform source and object decks into load modules, allocate
common datasets, and show how to almost have SYSTEM symbolics
in a batch job.

Member   Purpose of the member
-------- --------------------------------------------------------------
$$$INDEX This member
ASM2LMOD PROC to assemble and link source to an LMOD.
ASM2OBJ  PROC to assemble and save OBJECT deck.
IEASYM00 Set statements to simulate SYSTEM Symbolics for batch jobs.
OBJ2LMOD PROC to link an OBJECT deck to an LMOD.
ISPFPROC PROCedure to INCLUDE TSOPROC and allocate ISPF datasets.
TSOPROC  PROCedure to allocate TSO datasets.
./ ADD NAME=ASM2LMOD 0666-07210-07210-1200-00001-00001-00000-DIR2UPDT
//ASM2LMOD PROC MBRNAME=DUMMY
//*
//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//* ASSEMBLE THE SOURCE INTO AN OBJECT DECK.
//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//ASM     EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=SHR,DSN=&SYSUID..SRCLIB(&MBRNAME)
//SYSLIN   DD  DISP=(NEW,PASS),DSN=&&OBJDECK,
//             UNIT=VIO,
//             SPACE=(TRK,1),
//             DCB=BLKSIZE=27920,
//*
//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//* LINK THE OBJECT DECK INTO A LOAD MODULE.
//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//IFASM    IF  (ASM.RC EQ 0) THEN
//LKED    EXEC PGM=IEWBLINK,
//             PARM='NCAL,MAP,LIST,LET'
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))
//SYSPRINT DD  SYSOUT=*
//OBJLIB   DD  DISP=SHR,DSN=&SYSUID..OBJLIB
//EXELIB   DD  DISP=SHR,DSN=&SYSUID..EXELIB
//SYSLMOD  DD  DISP=SHR,DSN=&SYSUID..EXELIB
//SYSLIN   DD  DISP=(OLD,DELETE),DSN=&&OBJDECK
//         DD  DDNAME=LNKPARM
//*
//IFASM   ENDIF
//        PEND
./ ADD NAME=ASM2OBJ  0666-07210-07210-1146-00001-00001-00000-DIR2UPDT
//ASM2OBJ  PROC MBRNAME=DUMMY
//*
//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//* ASSEMBLE THE SOURCE INTO AN OBJECT DECK.
//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//ASM     EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=SHR,DSN=&SYSUID..SRCLIB(&MBRNAME)
//SYSLIN   DD  DISP=OLD,DSN=&SYSUID..OBJLIB(&MBRNAME)
//*
//        PEND
./ ADD NAME=IEASYM00 0666-07210-07210-1142-00001-00001-00000-DIR2UPDT
//*
//* SYSTEM SYMBOLICS FOR BATCH JOBS ON SYSTEM ZOS1
//*
//* THIS WORKS BEST IF YOU HAVE ONE PER SYSTEM IN A NON-SHARED SYSTEM
//* UNIQUE PROCLIB ACCESSIBLE TO JES2.
//*
//LPARNAME SET LPARNAME=ZOSPROD
//SYSPLEX  SET SYSPLEX=PLEXNAME
//SYSNAME  SET SYSNAME=ZOS1
//*
./ ADD NAME=ISPFPROC 0666-07214-07214-2030-00001-00001-00000-DIR2UPDT
//ISPFPROC PROC MEMORY='18M',
//             SYS1='SYS1.'      <== SOME SHOPS DO AND SOME DO NOT
//*
//TSOISPF INCLUDE MEMBER=TSOPROC
//*
//* ISPF DATASETS
//*
//ISPLST   DD  DISP=(NEW,DELETE),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//             DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),DSN=&&LST
//ISPLST1  DD  DISP=(NEW,DELETE),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//             DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),DSN=&&LST1
//ISPLST2  DD  DISP=(NEW,DELETE),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//             DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),DSN=&&LST2
//ISPLOG   DD  DISP=(NEW,DELETE),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//             DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),DSN=&&LOG
//ISPLOG1  DD  DISP=(NEW,DELETE),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//             DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),DSN=&&LOG1
//ISPLOG2  DD  DISP=(NEW,DELETE),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//             DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),DSN=&&LOG2
//ISPLLIB  DD  DISP=SHR,DSN=&SYSUID..EXELIB                   <= YOURS
//ISPMLIB  DD  DISP=SHR,DSN=&SYSUID..MSGS                     <= YOURS
//         DD  DISP=SHR,DSN=&SYS1.ISP.SISPMENU
//ISPPLIB  DD  DISP=SHR,DSN=&SYSUID..PANELS                   <= YOURS
//         DD  DISP=SHR,DSN=&SYS1.ISP.SISPPENU
//ISPPROF  DD  DISP=(NEW,PASS),DSN=&&ISPPROF,
//             UNIT=SYSALLDA,
//             SPACE=(TRK,(5,1,10)),
//             DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=3120
//ISPSLIB  DD  DISP=SHR,DSN=&SYSUID..SKELS                    <= YOURS
//         DD  DISP=SHR,DSN=&SYS1.ISP.SISPSENU
//         DD  DISP=SHR,DSN=&SYS1.ISP.SISPSLIB
//*
//ISPTABL  DD  DISP=(SHR,PASS),DSN=&&ISPPROF,
//             VOL=REF=*.TSOISPF.ISPPROF
//*
//*      OR
//*
//*SPTABL  DD  DISP=SHR,DSN=&SYSUID..TABLES             <= MAYBE YOURS
//ISPTLIB  DD  DISP=(SHR,PASS),DSN=&&ISPPROF,
//             VOL=REF=*.TSOISPF.ISPPROF
//*        DD  DISP=SHR,DSN=&SYSUID..TABLES             <= MAYBE YOURS
//         DD  DISP=SHR,DSN=&SYS1.ISP.SISPTENU
//        PEND
./ ADD NAME=OBJ2LMOD 0666-07210-07210-1201-00001-00001-00000-DIR2UPDT
//OBJ2LMOD PROC MBRNAME=DUMMY
//*
//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//* LINK THE OBJECT DECK INTO A LOAD MODULE.
//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//LKED    EXEC PGM=IEWBLINK,
//             PARM='NCAL,MAP,LIST,LET'
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))
//SYSPRINT DD  SYSOUT=*
//EXELIB   DD  DISP=SHR,DSN=&SYSUID..EXELIB
//SYSLMOD  DD  DISP=SHR,DSN=&SYSUID..EXELIB
//SYSLIN   DD  DISP=SHR,DSN=&SYSUID..OBJLIB(&MBRNAME)
//         DD  DDNAME=LNKPARM
//*
//        PEND
./ ADD NAME=TSOPROC  0666-07214-07214-2043-00001-00001-00000-DIR2UPDT
//TSOPROC PROC PARM=''
//TSO     EXEC PGM=IKJEFT1B,DYNAMNBR=300,
//             PARM=&PARM'
//*
//* TSO DATASETS
//*
//SYSTSPRT DD  SYSOUT=*
//SYSPROC  DD  DISP=SHR,DSN=&SYSUID..CLIST                    <= YOURS
//SYSEXEC  DD  DISP=SHR,DSN=&SYSUID..REXX                     <= YOURS
//        PEND
./ ENDUP
